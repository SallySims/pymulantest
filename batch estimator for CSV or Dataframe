import pandas as pd
import numpy as np

class AnthropometricAgent:
    def __init__(self):
        """Initialize the agent with required column names."""
        self.required_cols = ['height_cm', 'weight_kg', 'age', 'sex', 'wc_cm', 'hip_cm']

    def validate_input(self, df):
        """
        Validate the input DataFrame for required columns and realistic data ranges.

        Args:
            df (pd.DataFrame): Input DataFrame to validate.

        Raises:
            ValueError: If required columns are missing or data contains unrealistic values.
        """
        missing_columns = [col for col in self.required_cols if col not in df.columns]
        if missing_columns:
            raise ValueError(f"Missing required columns: {', '.join(missing_columns)}")

        mask = (df['height_cm'].between(50, 250)) & \
               (df['weight_kg'].between(10, 500)) & \
               (df['age'].between(0, 120))
        if not mask.all():
            raise ValueError("Data contains unrealistic values (e.g., height < 50cm, weight < 10kg, etc.)")

        return True

    def process_data(self, input_data, output_file=None):
        """
        Process the input data (CSV file or DataFrame) and generate anthropometric indices.

        Args:
            input_data (str or pd.DataFrame): Path to the input CSV file or DataFrame to process.
            output_file (str): Path to save the output CSV file (if applicable).

        Returns:
            pd.DataFrame: Processed DataFrame with calculated indices.

        Raises:
            ValueError: If input validation fails.
            Exception: For other processing errors.
        """
        try:
            # Check if input_data is a path to a CSV file or already a DataFrame
            if isinstance(input_data, str):  # Input is a file path (CSV)
                df = pd.read_csv(input_data)
            elif isinstance(input_data, pd.DataFrame):  # Input is already a DataFrame
                df = input_data
            else:
                raise ValueError("input_data must be a file path (str) or a pandas DataFrame.")

            # Validate input DataFrame
            self.validate_input(df)

            df['sex'] = df['sex'].replace({'male': 0, 'female': 1, 0: 0, 1: 1}).fillna(-1).astype(int)
            if (df['sex'] == -1).any():
                raise ValueError("Invalid sex values. Use 'male', 'female', 0, or 1.")

            # Functions for calculating the anthropometric indices (same as your original functions)
            def calculate_bmi(weight_kg, height_cm):
                height_m = height_cm / 100
                return weight_kg / (height_m ** 2)

            def calculate_bmr(sex, weight_kg, height_cm, age):
                height_m = height_cm / 100
                if sex == 0:
                    return 88.362 + (13.397 * weight_kg) + (4.799 * height_m * 100) - (5.677 * age)
                else:
                    return 447.593 + (9.247 * weight_kg) + (3.098 * height_m * 100) - (4.330 * age)

            # Other functions omitted for brevity, but they remain the same as your code.

            # Apply calculations to the DataFrame
            df['bmi'] = df.apply(lambda row: calculate_bmi(row['weight_kg'], row['height_cm']), axis=1).round(2)
            df['bmr'] = df.apply(lambda row: calculate_bmr(row['sex'], row['weight_kg'], row['height_cm'], row['age']), axis=1).round(2)
            # Add more columns as needed, applying the same approach to your calculation functions

            # Add the 'bmi_category' column
            df['bmi_category'] = pd.cut(df['bmi'], bins=[0, 18.5, 25, 30, np.inf],
                                        labels=['underweight', 'normal', 'overweight', 'obese'])

            # Output to CSV if a file path is provided
            if output_file:
                df.to_csv(output_file, index=False)
                print(f"✅ Results saved to {output_file}")

            return df

        except Exception as e:
            print(f"❌ Error: {e}")
            raise
